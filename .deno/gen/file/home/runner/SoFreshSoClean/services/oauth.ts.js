import { OAuth2Client } from "oauth2"; // See import_map.json
const OAUTH_CLIENT_ID = Deno.env.get("OAUTH_CLIENT_ID");
const OAUTH_CLIENT_SECRET = Deno.env.get("OAUTH_CLIENT_SECRET");
const OAUTH_BASE_URL = Deno.env.get("OAUTH_BASE_URL");
const OAUTH_REDIRECT_URI = Deno.env.get("OAUTH_REDIRECT_URI");
const OAUTH_AUDIENCE = Deno.env.get("OAUTH_AUDIENCE");
const oauth2Client = new OAuth2Client({
    clientId: OAUTH_CLIENT_ID,
    clientSecret: OAUTH_CLIENT_SECRET,
    authorizationEndpointUri: `${OAUTH_BASE_URL}/authorize`,
    tokenUri: `${OAUTH_BASE_URL}/oauth/token`,
    resourceEndpointHost: OAUTH_AUDIENCE,
    redirectUri: OAUTH_REDIRECT_URI,
    defaults: {
        scope: "openid email profile offline_access"
    }
});
const getUserProfile = async (accessToken)=>{
    try {
        let url = `${OAUTH_BASE_URL}/userinfo`;
        let options = {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${accessToken}`
            }
        };
        let response = await fetch(url, options);
        let json = await response.json();
        return json;
    } catch (err) {
        console.error(err);
    }
};
export { getUserProfile, oauth2Client };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvU29GcmVzaFNvQ2xlYW4vc2VydmljZXMvb2F1dGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT0F1dGgyQ2xpZW50IH0gZnJvbSBcIm9hdXRoMlwiOyAvLyBTZWUgaW1wb3J0X21hcC5qc29uXG5cbmNvbnN0IE9BVVRIX0NMSUVOVF9JRCA9IERlbm8uZW52LmdldChcIk9BVVRIX0NMSUVOVF9JRFwiKTtcbmNvbnN0IE9BVVRIX0NMSUVOVF9TRUNSRVQgPSBEZW5vLmVudi5nZXQoXCJPQVVUSF9DTElFTlRfU0VDUkVUXCIpO1xuY29uc3QgT0FVVEhfQkFTRV9VUkwgPSBEZW5vLmVudi5nZXQoXCJPQVVUSF9CQVNFX1VSTFwiKTtcbmNvbnN0IE9BVVRIX1JFRElSRUNUX1VSSSA9IERlbm8uZW52LmdldChcIk9BVVRIX1JFRElSRUNUX1VSSVwiKTtcbmNvbnN0IE9BVVRIX0FVRElFTkNFID0gRGVuby5lbnYuZ2V0KFwiT0FVVEhfQVVESUVOQ0VcIik7XG5cbmNvbnN0IG9hdXRoMkNsaWVudCA9IG5ldyBPQXV0aDJDbGllbnQoe1xuICBjbGllbnRJZDogT0FVVEhfQ0xJRU5UX0lELFxuICBjbGllbnRTZWNyZXQ6IE9BVVRIX0NMSUVOVF9TRUNSRVQsXG4gIGF1dGhvcml6YXRpb25FbmRwb2ludFVyaTogYCR7T0FVVEhfQkFTRV9VUkx9L2F1dGhvcml6ZWAsXG4gIHRva2VuVXJpOiBgJHtPQVVUSF9CQVNFX1VSTH0vb2F1dGgvdG9rZW5gLFxuICByZXNvdXJjZUVuZHBvaW50SG9zdDogT0FVVEhfQVVESUVOQ0UsXG4gIHJlZGlyZWN0VXJpOiBPQVVUSF9SRURJUkVDVF9VUkksXG4gIGRlZmF1bHRzOiB7XG4gICAgc2NvcGU6IFwib3BlbmlkIGVtYWlsIHByb2ZpbGUgb2ZmbGluZV9hY2Nlc3NcIixcbiAgfSxcbn0pO1xuXG5jb25zdCBnZXRVc2VyUHJvZmlsZSA9IGFzeW5jIChhY2Nlc3NUb2tlbikgPT4ge1xuICB0cnkge1xuICAgIGxldCB1cmwgPSBgJHtPQVVUSF9CQVNFX1VSTH0vdXNlcmluZm9gO1xuICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gXG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuICAgIGxldCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiBqc29uO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycilcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0VXNlclByb2ZpbGUsIG9hdXRoMkNsaWVudCB9O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsWUFBWSxRQUFRLFFBQVEsQ0FBQyxDQUFDLHNCQUFzQjtBQUU3RCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxBQUFDO0FBQ3hELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQUFBQztBQUNoRSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxBQUFDO0FBQ3RELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQUFBQztBQUM5RCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxBQUFDO0FBRXRELE1BQU0sWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDO0lBQ3BDLFFBQVEsRUFBRSxlQUFlO0lBQ3pCLFlBQVksRUFBRSxtQkFBbUI7SUFDakMsd0JBQXdCLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxVQUFVLENBQUM7SUFDdkQsUUFBUSxFQUFFLENBQUMsRUFBRSxjQUFjLENBQUMsWUFBWSxDQUFDO0lBQ3pDLG9CQUFvQixFQUFFLGNBQWM7SUFDcEMsV0FBVyxFQUFFLGtCQUFrQjtJQUMvQixRQUFRLEVBQUU7UUFDUixLQUFLLEVBQUUscUNBQXFDO0tBQzdDO0NBQ0YsQ0FBQyxBQUFDO0FBRUgsTUFBTSxjQUFjLEdBQUcsT0FBTyxXQUFXLEdBQUs7SUFDNUMsSUFBSTtRQUNGLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxjQUFjLENBQUMsU0FBUyxDQUFDLEFBQUM7UUFDdkMsSUFBSSxPQUFPLEdBQUc7WUFDWixNQUFNLEVBQUUsS0FBSztZQUNiLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxlQUFlLEVBQUUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7YUFDekM7U0FDRixBQUFDO1FBQ0YsSUFBSSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxBQUFDO1FBQ3pDLElBQUksSUFBSSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxBQUFDO1FBQ2pDLE9BQU8sSUFBSSxDQUFDO0tBQ2IsQ0FBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0tBQ25CO0NBQ0YsQUFBQztBQUVGLFNBQVMsY0FBYyxFQUFFLFlBQVksR0FBRyJ9